import{S,i as D,s as j,e as k,c as w,a as C,d as u,b as y,f as d,n as p,o as q,p as _,u as x,m as A,v as g,w as $,x as v,A as b,t as L,j as E,g as M,l as R,H as z,I}from"../chunks/vendor-3d38fcf1.js";import{C as N,Q as P,S as Q}from"../chunks/qrcode-655654b5.js";/* empty css                                                   */function T(i){let t,n;return t=new N({props:{channel:i[0]}}),{c(){g(t.$$.fragment)},l(e){$(t.$$.fragment,e)},m(e,o){v(t,e,o),n=!0},p(e,o){const c={};o&1&&(c.channel=e[0]),t.$set(c)},i(e){n||(_(t.$$.fragment,e),n=!0)},o(e){p(t.$$.fragment,e),n=!1},d(e){b(t,e)}}}function U(i){let t,n,e,o,c;return o=new P({props:{data:i[2]}}),{c(){t=k("p"),n=L("Let the other User scan this Code"),e=E(),g(o.$$.fragment),this.h()},l(s){t=w(s,"P",{class:!0});var l=C(t);n=M(l,"Let the other User scan this Code"),l.forEach(u),e=R(s),$(o.$$.fragment,s),this.h()},h(){y(t,"class","svelte-xbt0zw")},m(s,l){d(s,t,l),z(t,n),d(s,e,l),v(o,s,l),c=!0},p(s,l){const r={};l&4&&(r.data=s[2]),o.$set(r)},i(s){c||(_(o.$$.fragment,s),c=!0)},o(s){p(o.$$.fragment,s),c=!1},d(s){s&&u(t),s&&u(e),b(o,s)}}}function H(i){let t,n;return t=new Q({props:{type:"answer"}}),{c(){g(t.$$.fragment)},l(e){$(t.$$.fragment,e)},m(e,o){v(t,e,o),n=!0},p:I,i(e){n||(_(t.$$.fragment,e),n=!0)},o(e){p(t.$$.fragment,e),n=!1},d(e){b(t,e)}}}function J(i){let t,n,e,o;const c=[H,U,T],s=[];function l(r,a){return r[1]==="scanning"?0:r[1]==="offering"?1:r[1]==="chatting"?2:-1}return~(n=l(i))&&(e=s[n]=c[n](i)),{c(){t=k("main"),e&&e.c(),this.h()},l(r){t=w(r,"MAIN",{class:!0});var a=C(t);e&&e.l(a),a.forEach(u),this.h()},h(){y(t,"class","svelte-xbt0zw")},m(r,a){d(r,t,a),~n&&s[n].m(t,null),o=!0},p(r,[a]){let f=n;n=l(r),n===f?~n&&s[n].p(r,a):(e&&(A(),p(s[f],1,1,()=>{s[f]=null}),q()),~n?(e=s[n],e?e.p(r,a):(e=s[n]=c[n](r),e.c()),_(e,1),e.m(t,null)):e=null)},i(r){o||(_(e),o=!0)},o(r){p(e),o=!1},d(r){r&&u(t),~n&&s[n].d()}}}function O(i,t,n){let e,o="scanning",c;return x(()=>{addEventListener("scan",async s=>{n(1,o="offering");const l=s.detail.sdp,r={};r.iceServers=[],r.iceServers.push({urls:"stun:stun1.l.google.com:19302"});const a=new RTCPeerConnection(r);a.onicecandidate=f=>{n(2,c=a.localDescription.sdp)},a.ondatachannel=f=>{const m=f.channel;m.onmessage=h=>console.log("Message received: "+h.data),m.onopen=h=>{console.log("Connection opened."),n(1,o="chatting")},m.onclose=h=>{console.log("Connection closed."),location.href="https://phibr0.de/webRTC-Demo"},n(0,e=m)},a.setRemoteDescription(l),await a.createAnswer().then(f=>a.setLocalDescription(f)).then(f=>console.log(JSON.stringify(a.localDescription)))})}),[e,o,c]}class K extends S{constructor(t){super();D(this,t,O,J,j,{})}}export{K as default};
